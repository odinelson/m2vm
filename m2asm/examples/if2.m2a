%CODE
	CALL @start
	HALT
; < begin_function, start, _, _ >
@start:
	PUSH FP
	CPY  FP, SP
	;allocate space for local vars
	ADD  SP, -8
; < param, "Value for a: ", _, _ >
	LOD R0, @$TEXT1
; < call, write_text, _, _ >
	CALL @write_text
; < call, read_int, _, $t1 >
	CALL @read_int
; < :=, $t1, _, a >
	STOR *(FP-4), R0
; < param, "Value for b: ", _, _ >
	LOD R0, @$TEXT2
; < call, write_text, _, _ >
	CALL @write_text
; < call, read_int, _, $t1 >
	CALL @read_int
; < :=, $t1, _, b >
	STOR *(FP-8), R0
; < <, a, b, $t1 >
	LOD R1, *(FP-4)
	LOD R2, *(FP-8)
	CMP R1, R2
; < goto_if_false, $t1, _, L1 >
	JGE @L1
; < param, "b is bigger", _, _ >
	LOD R0, @$TEXT3
; < call, write_text, _, _ >
	CALL @write_text
; < call, write_nl, _, _ >
	CALL @write_nl
; < goto, _, _, L2 >
	JMP @L2
; < label, L1, _, _ >
@L1:
; < <, b, a, $t1 >
	LOD R1, *(FP-8)
	LOD R2, *(FP-4)
	CMP R1, R2
; < goto_if_false, $t1, _, L3 >
	JGE @L3
; < param, "a is bigger", _, _ >
	LOD R0, @$TEXT4
; < call, write_text, _, _ >
	CALL @write_text
; < call, write_nl, _, _ >
	CALL @write_nl
; < goto, _, _, L4 >
	JMP @L4
; < label, L3, _, _ >
@L3:
; < param, "a equals b", _, _ >
	LOD R0, @$TEXT5
; < call, write_text, _, _ >
	CALL @write_text
; < call, write_nl, _, _ >
	CALL @write_nl
; < goto, _, _, L4 >
	JMP @L4
; < label, L4, _, _ >
@L4:
; < goto, _, _, L2 >
	JMP @L2
; < label, L2, _, _ >
@L2:
; < end_function, start, _, _ >
	CPY SP, FP
	POP FP
	RET	
;end of start
; < begin_function, getNum, _, _ >
@getNum:
	PUSH FP
	CPY  FP, SP
	;allocate space for local vars
	ADD  SP, -4
; < param, prompt, _, _ >
	LOD R0, *(FP+8)
; < call, write_text, _, _ >
	CALL @write_text
; < call, read_int, _, $t1 >
	CALL @read_int
; < :=, $t1, _, n >
	STOR *(FP-4), R1
; < return, n, _, _ >
	LOD R0, *(FP-4)
; < end_function, getNum, _, _ >
	CPY SP, FP
	POP FP
	RET	
;end of getNum
%INCLUDE stdlib

%DATA
	@$TEXT1: DB "Value for a: ",0
	@$TEXT2: DB "Value for b: ",0
	@$TEXT3: DB "b is bigger",0
	@$TEXT4: DB "a is bigger",0
	@$TEXT5: DB "a equals b",0
